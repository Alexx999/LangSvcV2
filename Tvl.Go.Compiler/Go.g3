grammar Go;

options
{
	language=CSharp3;
	output=AST;
	ASTLabelType=CommonTree;
	backtrack=true;
}

tokens
{
	KW_BREAK       = 'break';
	KW_CASE        = 'case';
	KW_CHAN        = 'chan';
	KW_CONST       = 'const';
	KW_CONTINUE    = 'continue';
	KW_DEFAULT     = 'default';
	KW_DEFER       = 'defer';
	KW_ELSE        = 'else';
	KW_FALLTHROUGH = 'fallthrough';
	KW_FOR         = 'for';
	KW_FUNC        = 'func';
	KW_GO          = 'go';
	KW_GOTO        = 'goto';
	KW_IF          = 'if';
	KW_IMPORT      = 'import';
	KW_INTERFACE   = 'interface';
	KW_MAP         = 'map';
	KW_PACKAGE     = 'package';
	KW_RANGE       = 'range';
	KW_RETURN      = 'return';
	KW_SELECT      = 'select';
	KW_STRUCT      = 'struct';
	KW_SWITCH      = 'switch';
	KW_TYPE        = 'type';
	KW_VAR         = 'var';

	// delimiters
	LPAREN='(';
	RPAREN=')';
	LBRACK='[';
	RBRACK=']';
	LBRACE='{';
	RBRACE='}';
	SEMI=';';
	COMMA=',';
	DOT='.';
	COLON=':';

	// operators
	EQ			='=';
	NEQ			='!=';
	EQEQ		='==';
	PLUS		='+';
	PLUSEQ		='+=';
	MINUS		='-';
	MINUSEQ		='-=';
	TIMES		='*';
	TIMESEQ		='*=';
	DIV			='/';
	DIVEQ		='/=';
	LT			='<';
	GT			='>';
	LE			='<=';
	GE			='>=';
	NOT			='!';
	AND			='&&';
	BITAND		='&';
	ANDEQ		='&=';
	BITCLR		='&^';
	BITCLREQ	='&^=';
	OR			='||';
	BITOR		='|';
	OREQ		='|=';
	INC			='++';
	DEC			='--';
	XOR			='^';
	XOREQ		='^=';
	MOD			='%';
	MODEQ		='%=';
	LSHIFT		='<<';
	RSHIFT		='>>';
	LSHIFTEQ	='<<=';
	RSHIFTEQ	='>>=';
	DEFEQ		=':=';
	ELLIP		='...';
	CHAN		='<-';

	AST_VARS;
	AST_VALUES;
}

@lexer::namespace{Tvl.VisualStudio.Language.Go}
@parser::namespace{Tvl.VisualStudio.Language.Go}

/*
 * Types
 */

type
	:	typeName
	|	typeLit
	|	'(' type ')'
	;

typeName
	:	qualifiedIdent
	;

typeLit
	:	arrayType
	|	structType
	|	pointerType
	|	functionType
	|	interfaceType
	|	sliceType
	|	mapType
	|	channelType
	;

// Array types

arrayType
	:	'['^ arrayLength ']' elementType
	;

arrayLength
	:	expression
	;

elementType
	:	type
	;

// Slice types

sliceType
	:	'['^ ']' elementType
	;

// Struct types

structType
	:	'struct'
		'{'
		(	'}'
		|	fieldDecl (';' fieldDecl)* ';'? '}'
		)
		-> ^('struct' fieldDecl*)
	;

fieldDecl
	:	(	identifierList type
		|	anonymousField
		)
		tag?
	;

anonymousField
	:	'*'? typeName
	;

tag
	:	STRING_LITERAL
	;

// Pointer types

pointerType
	:	'*'^ baseType
	;

baseType
	:	type
	;

// Function types

functionType
	:	'func'^ signature
	;

signature
	:	parameters result?
	;

result
	:	parameters
	|	type
	;

parameters
	:	'('^ (parameterList ','?)? ')'
	;

parameterList
	:	parameterDecl (',' parameterDecl)*
	;

parameterDecl
	:	identifierList (type|'...')?
	|	(type|'...')
	;

// Interface types

interfaceType
	:	'interface'^
		'{'
		(	'}'
		|	methodSpec (';' methodSpec)* ';'? '}'
		)
	;

methodSpec
	:	methodName signature
	|	interfaceTypeName
	;

methodName
	:	IDENTIFIER
	;

interfaceTypeName
	:	typeName
	;

// Map types

mapType
	:	'map'^ '[' keyType ']' elementType
	;

keyType
	:	type
	;

// Channel types

channelType
	:	channel
	|	sendChannel
	|	recvChannel
	;

channel
	:	'chan'^ elementType
	;

sendChannel
	:	'chan'^ '<-' elementType
	;

recvChannel
	:	'<-' 'chan'^ elementType
	;

/*
 * Blocks
 */

block
	:	'{'^
		(	'}'!
		|	// due to the emptyStmt, there is no need to add ';'? before the '}'
			statement (';'! statement)* '}'!
		)
	;

/*
 * Declarations and scope
 */

declaration
	:	constDecl
	|	typeDecl
	|	varDecl
	;

topLevelDecl
	:	declaration
	|	functionDecl
	|	methodDecl
	;

// Constant declarations

constDecl
	:	'const'
		(	constSpec
		|	'(' (constSpec ';')* ')'
		)
		-> ^('const' constSpec*)
	;

constSpec
	:	identifierList
		(type? '=' expressionList)?
	;

identifierList
	:	IDENTIFIER (','! IDENTIFIER)*
	;

expressionList
	:	expression (','! expression)*
	;

// Type declarations

typeDecl
	:	'type'
		(	typeSpec
		|	'(' (typeSpec ';')* ')'
		)
		-> ^('type' typeSpec*)
	;

typeSpec
	:	IDENTIFIER^ type
	;

// Variable declarations

varDecl
	:	'var'
		(	varSpec
		|	'(' (varSpec ';')* ')'
		)
		-> ^('var' varSpec*)
	;

varSpec
	:	identifierList
		(	type ('=' expressionList)?
		|	'=' expressionList
		)
	;

// Short variable declarations

shortVarDecl
	:	identifierList ':=' expressionList
		-> ^(':=' ^(AST_VARS identifierList) ^(AST_VALUES expressionList))
	;

// Function declarations

functionDecl
	:	'func'^ IDENTIFIER signature body?
	;

body
	:	block
	;

// Method declarations

methodDecl
	:	'func'^ receiver methodName signature body?
	;

receiver
	:	'(' IDENTIFIER? '*'? baseTypeName ')'
	;

baseTypeName
	:	IDENTIFIER
	;

/*
 * Expressions
 */

// Operands

operand
	:	literal
	|	qualifiedIdent
	|	methodExpr
	|	'(' expression ')'
	;

literal
	:	basicLit
	|	compositeLit
	|	functionLit
	;

basicLit
	:	NUMBER
	|	CHAR_LITERAL
	|	STRING_LITERAL
	;

// Qualified identifiers

qualifiedIdent
	:	(packageName '.'^)? IDENTIFIER
	;

// Composite literals

compositeLit
	:	literalType '{' (elementList ','?)? '}'
	;

literalType
	:	structType
	|	arrayType
	|	'['^ '...' ']' elementType
	|	sliceType
	|	mapType
	|	typeName
	|	'('^ literalType ')'
	;

elementList
	:	element (',' element)*
	;

element
	:	(key ':')? value
	;

key
	:	fieldName
	|	elementIndex
	;

fieldName
	:	IDENTIFIER
	;

elementIndex
	:	expression
	;

value
	:	expression
	;

// Function literals

functionLit
	:	functionType body
	;

// Primary expressions

primaryExpr
	:	(	operand
		//|	conversion
		//|	builtinCall
		)
		(	selector
		|	index
		|	slice
		|	typeAssertion
		|	call
		)*
	;

selector
	:	'.'^ IDENTIFIER
	;

index
	:	'['^ expression ']'
	;

slice
	:	'['^ expression ':' expression? ']'
	;

typeAssertion
	:	'.'^ '(' type ')'
	;

call
	:	'('^ (expressionList ','?)? ')'
	;

// Selectors
// Indexes
// Slices
// Type assertions
// Calls
// Passing arguments to ... parameters
// Operators

expression
	:	unaryExpr (binaryOp^ unaryExpr)*
	;

unaryExpr
	:	primaryExpr
	|	unaryOp^ unaryExpr
	;

binaryOp
	:	logOp
	|	comOp
	|	relOp
	|	addOp
	|	mulOp
	;

logOp
	:	'||' | '&&'
	;

comOp
	:	'<-'
	;

relOp
	:	'==' | '!=' | '<' | '<=' | '>' | '>='
	;

addOp
	:	'+' | '-' | '|' | '^'
	;

mulOp
	:	'*' | '/' | '%' | '<<' | '>>' | '&' | '&^'
	;

unaryOp
	:	'+' | '-' | '!' | '^' | '*' | '&' | '<-'
	;

// Operator precedence
// Arithmetic operators
// Integer overflow
// Comparison operators
// Logical operators
// Address operators
// Communication operators
// Method expressions

methodExpr
	:	receiverType '.' methodName
	;

receiverType
	:	typeName
	|	'(' '*' typeName ')'
	;

// Conversions

conversion
	:	literalType '(' expression ')'
	;

// Constant expressions
// Order of evaluation

/*
 * Statements
 */

statement
	:	declaration
	|	labeledStmt
	|	simpleStmt
	|	goStmt
	|	returnStmt
	|	breakStmt
	|	continueStmt
	|	gotoStmt
	|	fallthroughStmt
	|	block
	|	ifStmt
	|	switchStmt
	|	selectStmt
	|	forStmt
	|	deferStmt
	;

simpleStmt
	:	shortVarDecl
	|	assignment
	|	incDecStmt
	|	expressionStmt
	|	emptyStmt
	;

// Empty statements

emptyStmt
	:
	;

// Labeled statements

labeledStmt
	:	label ':' statement
	;

label
	:	IDENTIFIER
	;

// Expression statements

expressionStmt
	:	expression
	;

// IncDec statements

incDecStmt
	:	expression ('++' | '--')
	;

// Assignments

assignment
	:	expressionList assignOp expressionList
	;

assignOp
	:	'='
	|	'+=' | '-=' | '|=' | '^='
	|	'*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '&^='
	;

// If statements

ifStmt
	:	'if'^ (simpleStmt ';')? expression? block ('else' statement)?
	;

// Switch statements

switchStmt
	:	exprSwitchStmt
	|	typeSwitchStmt
	;

exprSwitchStmt
	:	'switch'^ (simpleStmt ';')? expression? '{' exprCaseClause* '}'
	;

exprCaseClause
	:	exprSwitchCase ':' (statement ';')*
	;

exprSwitchCase
	:	'case'^ expressionList
	|	'default'
	;

typeSwitchStmt
	:	'switch'^ (simpleStmt ';')? typeSwitchGuard '{' typeCaseClause '}'
	;

typeSwitchGuard
	:	(IDENTIFIER ':=')? primaryExpr '.' '(' 'type' ')'
	;

typeCaseClause
	:	typeSwitchCase ':' (statement ';')*
	;

typeSwitchCase
	:	'case'^ typeList
	|	'default'
	;

typeList
	:	type (','! type)*
	;

// For statements

forStmt
	:	'for'^
		(	rangeClause
		|	forClause
		|	condition
		)?
		block
	;

condition
	:	expression
	;

forClause
	:	initStmt? ';' condition? ';' postStmt?
	;

initStmt
	:	simpleStmt
	;

postStmt
	:	simpleStmt
	;

rangeClause
	:	expressionList ('=' | ':=') 'range' expression
	;

// Go statements

goStmt
	:	'go'^ expression
	;

// Select statements

selectStmt
	:	'select'^ '{' commClause* '}'
	;

commClause
	:	commCase ':' (statement ';')*
	;

commCase
	:	'case'^ (sendExpr | recvExpr)
	|	'default'
	;

sendExpr
	:	expression '<-' expression
	;

recvExpr
	:	(expression ('=' | ':='))? '<-' expression
	;

// Return statements

returnStmt
	:	'return'^ expressionList?
	;

// Break statements

breakStmt
	:	'break'^ label?
	;

// Continue statements

continueStmt
	:	'continue'^ label?
	;

// Goto statements

gotoStmt
	:	'goto'^ label
	;

// Fallthrough statements

fallthroughStmt
	:	'fallthrough'
	;

// Defer statements

deferStmt
	:	'defer'^ expression
	;

/*
 * Built-in functions
 */

//builtinCall
//	:	IDENTIFIER '(' builtinArgs? ')'
//	;

//builtinArgs
//	:	type (',' expressionList)?
//	|	expressionList
//	;

/*
 * Packages
 */

// Source file organization

public
sourceFile
	:	packageClause ';'!
		(importDecl ';'!)*
		(topLevelDecl ';'!)*
		EOF
	;

// Package clause

packageClause
	:	'package'^ packageName
	;

packageName
	:	IDENTIFIER
	;

// Import declarations

importDecl
	:	'import'
		(	importSpec
		|	'(' (importSpec ';')* ')'
		)
		-> ^('import' importSpec*)
	;

importSpec
	:	('.' | packageName)?
		STRING_LITERAL^
	;

/*//////////////////////////////////////////////////////////////////////////*/
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// L E X E R

IDENTIFIER
	:	('a'..'z' | 'A'..'Z' | '_')
		('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*
	;

NUMBER
	:	(	'0'..'9'
		| 	'.' '0'..'9'
		)+
		(IDENTIFIER NUMBER?)*
		'.'*
	;

COMMENT
	:	'//' (~('\r' | '\n'))*
		{Skip();}
	;

ML_COMMENT
	:	'/*' .* '*/'
		{Skip();}
	;

CHAR_LITERAL
	:	'\''
		(	'\\' .
		|	~('\r' | '\n' | '\'' | '\\')
		)*
		'\''
	;

STRING_LITERAL
	:	'"'
		(	'\\' .
		|	~('\r' | '\n' | '"' | '\\')
		)*
		'"'
	;

WS
	:	(' ' | '\t')+
		{Skip();}
	;

NEW_LINE
	:	(	'\r' '\n'?
		|	'\n'
		)
		{$channel = Hidden;}
	;
