parser grammar PhpOutliningParser;

options {
    language=CSharp3;
    TokenLabelType=CommonToken;
    output=AST;
    ASTLabelType=CommonTree;
	tokenVocab=PhpDocCommentClassifierLexer;
}

@parser::namespace{Tvl.VisualStudio.Language.Php.Outlining}

public
compileUnit
	:	(htmlText | code)*
		EOF // need at least 2 nodes or the outliner will not work (expects to process children of a nil node, not a single standalone node)
	;

htmlText
	:	~HTML_START_CODE^ (options{greedy=true;} : ~HTML_START_CODE)*
	;

code
@after{_outlineTrees.Add($tree);}
	:	HTML_START_CODE^ codeElement* CLOSE_PHP_TAG
	;

codeElement
	:	classOrInterfaceDefinition
	|	functionDefinition
	|	codeBlock
	|	~(CLOSE_PHP_TAG|'function'|LBRACE|RBRACE|'class'|'interface')
	;

codeBlock
	:	LBRACE^
			(	codeElement
			|	htmlLiteral
			)*
		RBRACE
	;

htmlLiteral
	:	CLOSE_PHP_TAG^
			.*
		HTML_START_CODE
	;

classOrInterfaceDefinition
	:	('class' | 'interface') PHP_IDENTIFIER^ extendsList? implementsList? codeBlock
		{_outlineTrees.Add($codeBlock.tree);}
	;

extendsList
	:	'extends' PHP_IDENTIFIER (COMMA PHP_IDENTIFIER)*
	;

implementsList
	:	'implements' PHP_IDENTIFIER (COMMA PHP_IDENTIFIER)*
	;

functionDefinition
	:	'function' PHP_IDENTIFIER^ functionParameterList codeBlock
		{_outlineTrees.Add($codeBlock.tree);}
	;

functionParameterList
	:	LPAREN^ functionParameters? RPAREN
	;

functionParameters
	:	functionParameter (COMMA! functionParameter)*
	;

functionParameter
	:	AND? PHP_IDENTIFIER^ parameterDefaultValue?
	;

parameterDefaultValue
	:	EQ^
		(	~(COMMA|LPAREN|RPAREN)
		|	nestedParens
		)*
	;

nestedParens
	:	LPAREN^
			(	~(LPAREN|RPAREN)
			|	nestedParens
			)*
		RPAREN
	;
