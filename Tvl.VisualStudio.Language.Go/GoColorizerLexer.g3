lexer grammar GoColorizerLexer;

options
{
	language = CSharp3;
}

@namespace{Tvl.VisualStudio.Language.Go}
@modifier{internal}
@ctorModifier{private}

/*//////////////////////////////////////////////////////////////////////////*/
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// L E X E R

// delimiters
LPAREN:'(';
RPAREN:')';
LBRACK:'[';
RBRACK:']';
LBRACE:'{';
RBRACE:'}';
SEMI:';';
COMMA:',';
DOT:'.';
COLON:':';

// operators
EQ			:'=';
NEQ			:'!=';
EQEQ		:'==';
PLUS		:'+';
PLUSEQ		:'+=';
MINUS		:'-';
MINUSEQ		:'-=';
TIMES		:'*';
TIMESEQ		:'*=';
DIV			:'/';
DIVEQ		:'/=';
LT			:'<';
GT			:'>';
LE			:'<=';
GE			:'>=';
NOT			:'!';
//BITNOT		:'~';
AND			:'&&';
BITAND		:'&';
ANDEQ		:'&=';
BITCLR		:'&^';
BITCLREQ	:'&^=';
//QUES		:'?';
OR			:'||';
BITOR		:'|';
OREQ		:'|=';
INC			:'++';
DEC			:'--';
XOR			:'^';
XOREQ		:'^=';
MOD			:'%';
MODEQ		:'%=';
LSHIFT		:'<<';
RSHIFT		:'>>';
LSHIFTEQ	:'<<=';
RSHIFTEQ	:'>>=';
DEFEQ		:':=';
ELLIP		:'...';
CHAN		:'<-';

IDENTIFIER
	:	('a'..'z' | 'A'..'Z' | '_')
		('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*
	;

NUMBER
	:	(	'0'..'9'
		| 	'.' '0'..'9'
		)
		(IDENTIFIER NUMBER?)?
	;

COMMENT
	:	'//' (~('\r' | '\n'))*
	;

ML_COMMENT
	:	'/*' CONTINUE_COMMENT {$type = state.type;}
	;

fragment END_COMMENT : ;

fragment
CONTINUE_COMMENT
	:	(	~('\r'|'\n'|'*')
		|	{input.LA(2) != '/'}? => '*'
		)*
		(	'*/' {state.type = END_COMMENT;}
		|	{state.type = CONTINUE_COMMENT;}
		)
	;

CHAR_LITERAL
	:	'\''
		(	'\\' .
		|	~('\r' | '\n' | '\'' | '\\')
		)*
		'\''
	;

STRING_LITERAL
	:	'"'
		(	'\\' .
		|	~('\r' | '\n' | '"' | '\\')
		)*
		'"'
	;

RAW_STRING_LITERAL
	:	'`' CONTINUE_STRING {$type = state.type;}
	;

fragment END_STRING : ;

fragment
CONTINUE_STRING
	:	(	~('\r'|'\n'|'`'|'\\')
		|	'\\' (options{greedy=true;} : '`')?
		)*
		(	'`' {state.type = END_STRING;}
		|		{state.type = CONTINUE_STRING;}
		)
	;

WS
	:	(' ' | '\t')+
	;

NEWLINE
	:	'\r' '\n'?
	|	'\n'
	;

ANYCHAR
	:	.
	;
