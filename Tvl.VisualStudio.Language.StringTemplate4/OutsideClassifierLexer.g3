lexer grammar OutsideClassifierLexer;

options {
    language=CSharp3;
    TokenLabelType=CommonToken;
	tokenVocab=GroupClassifierLexer;
}

@namespace{Tvl.VisualStudio.Language.StringTemplate4}

LANGLE : '<';

fragment
RANGLE
	:	{Outermost == ClassifierLexer.OutermostTemplate.BigString}? => '\\>'
	|	{Outermost != ClassifierLexer.OutermostTemplate.BigString || input.LA(2) != '>'}? => '>'
	;

COMMENT
	:	'<!' CONTINUE_COMMENT {$type = state.type;}
	;

fragment END_COMMENT : ;

fragment
CONTINUE_COMMENT
	:	(	~('\r'|'\n'|'!')
		|	{input.LA(2) != '>'}? => '!'
		)*
		(	'!>' {state.type = END_COMMENT;}
		|	{state.type = CONTINUE_COMMENT;}
		)
	;

ESCAPE_TAG
	:	'<\\' .* '>'
	;

ESCAPE_CHAR
	:	'\\' c=.
		{
			if ($c != '>' && (Outermost != ClassifierLexer.OutermostTemplate.String || $c != '"'))
				$type = TEXT;
		}
	;

NEWLINE
	:	('\n' | '\r')*
	;

TEXT
	:	(	~('}'|'<'|'\n'|'\r'|'"'|'>'|'\\'|'%')
		|	{AnonymousTemplateLevel == 0}? => '}'
		|	{Outermost != ClassifierLexer.OutermostTemplate.String}? => '"'
		|	{Outermost != ClassifierLexer.OutermostTemplate.BigString || input.LA(2) != '>'}? => '>'
		|	{Outermost != ClassifierLexer.OutermostTemplate.BigStringLine || input.LA(2) != '>'}? => '%'
		)*
	;
