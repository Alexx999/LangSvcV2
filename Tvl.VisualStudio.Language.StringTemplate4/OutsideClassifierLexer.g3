lexer grammar OutsideClassifierLexer;

options {
    language=CSharp3;
    TokenLabelType=CommonToken;
	tokenVocab=GroupClassifierLexer;
	k=2;
}

@namespace{Tvl.VisualStudio.Language.StringTemplate4}

//LANGLE	: '<';
COMMA	: ',';
PIPE	: '|';

ID
	:	('a'..'z' | 'A'..'Z' | '_')+
	;

WS
	:	(' ' | '\t')+
	;

//fragment
//RANGLE
//	:	{Outermost == OutermostTemplate.BigString}? => '\\>'
//	|	{Outermost != OutermostTemplate.BigString || input.LA(2) != '>'}? => '>'
//	;

COMMENT
	:	LDELIM '!' CONTINUE_COMMENT {$type = state.type;}
	;

fragment END_COMMENT : ;

fragment
CONTINUE_COMMENT
	:	(	~('\r'|'\n'|'!')
		|	{input.LA(2) != CloseDelimiter}? => '!'
		)*
		(	'!' RDELIM {state.type = END_COMMENT;}
		|	{state.type = CONTINUE_COMMENT;}
		)
	;

ESCAPE_TAG
	:	LDELIM '\\' ({input.LA(1) != EOF && input.LA(1) != CloseDelimiter}? => .)* RDELIM
	;

ESCAPE_CHAR
	:	'\\' c=.
		{
			if ($c != '>' && (Outermost != OutermostTemplate.String || $c != '"'))
				$type = TEXT;
		}
	;

NEWLINE
	:	('\n' | '\r')+
	;

TEXT
	:	(	{input.LA(1) != OpenDelimiter}? => ~('}'|'\n'|'\r'|'"'|'>'|'\\'|'%'|'a'..'z'|'A'..'Z'|'_'|' '|'\t'|'|')
		|	{AnonymousTemplateLevel == 0}? => '}'
		|	{Outermost != OutermostTemplate.String}? => '"'
		|	{Outermost != OutermostTemplate.BigString || input.LA(2) != '>'}? => '>'
		|	{Outermost != OutermostTemplate.BigStringLine || input.LA(2) != '>'}? => '%'
		)+
	;

LDELIM	: {input.LA(1) == OpenDelimiter}? => ~'\\';

fragment
RDELIM	: {input.LA(1) == CloseDelimiter}? => ~'\\';
